export declare const HASH_AND_RECOVER = "\nfunction hashAndRecover (\n    bytes32 structHash,\n    bytes memory signature,\n    bytes32 domainSeparator\n) internal pure returns (address originalSigner) {\n    bytes32 hash = hashTypedDataV4(structHash, domainSeparator);\n    originalSigner = ECDSA.recover(hash, signature);\n}";
export declare const HASH_TYPED_DATA_V4 = "\nfunction hashTypedDataV4(\n    bytes32 structHash,\n    bytes32 domainSeparator\n) internal pure returns (bytes32) {\n    return ECDSA.toTypedDataHash(domainSeparator, structHash);\n}";
export declare const BUILD_DOMAIN_SEPARATOR_WITH_SALT = "\n\nfunction buildDomainSeparatorWithSalt(\n    string memory domainName,\n    string memory version,\n    address verifyingContract,\n    bytes32 salt\n) external  view returns (bytes32) {\n    bytes32 hashedDomainName = keccak256(bytes(domainName));\n    bytes32 hashedVersion = keccak256(bytes(version));\n\n    return\n        keccak256(\n            abi.encode(\n                DOMAIN_TYPE_HASH,\n                hashedDomainName,\n                hashedVersion,\n                block.chainid,\n                verifyingContract,\n                salt\n            )\n        );\n}";
export declare const BUILD_DOMAIN_SEPARATOR = "\n\nfunction buildDomainSeparator(\n    string memory domainName,\n    string memory version,\n    address verifyingContract\n) external  view returns (bytes32) {\n    bytes32 hashedDomainName = keccak256(bytes(domainName));\n    bytes32 hashedVersion = keccak256(bytes(version));\n\n    return\n        keccak256(\n            abi.encode(\n                DOMAIN_TYPE_HASH,\n                hashedDomainName,\n                hashedVersion,\n                block.chainid,\n                verifyingContract\n            )\n        );\n}";
export declare const ENCODE_STRING_ARRAY = "\n    function encodeStringArray(string[] memory arr) internal pure returns (bytes32) {\n        bytes32[] memory encodedStrings = new bytes32[](arr.length);\n\n        for (uint256 i = 0; i < arr.length; i++) {\n            encodedStrings[i] = keccak256(bytes((arr[i])));\n        }\n\n        return keccak256(abi.encodePacked(encodedStrings));\n    }\n";
export declare const ENCODE_BYTES_ARRAY = "\n    function encodeBytesArray(bytes[] memory arr) internal pure returns (bytes32) {\n        bytes32[] memory encodedBytes = new bytes32[](arr.length);\n\n        for (uint256 i = 0; i < arr.length; i++) {\n            encodedBytes[i] = keccak256(arr[i]);\n        }\n\n        return keccak256(abi.encodePacked(encodedBytes));\n    }\n";
