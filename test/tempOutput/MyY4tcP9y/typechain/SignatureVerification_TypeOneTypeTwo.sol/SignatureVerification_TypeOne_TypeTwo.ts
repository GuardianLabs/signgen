/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type AStructStruct = { exists: PromiseOrValue<boolean> };

export type AStructStructOutput = [boolean] & { exists: boolean };

export type BStructStruct = { custom: PromiseOrValue<string> };

export type BStructStructOutput = [string] & { custom: string };

export type TypeTwoStruct = {
  tests: PromiseOrValue<string>;
  testEnum: PromiseOrValue<BigNumberish>;
};

export type TypeTwoStructOutput = [string, number] & {
  tests: string;
  testEnum: number;
};

export type TypeOneStruct = {
  operation: PromiseOrValue<BigNumberish>;
  contractAddress: PromiseOrValue<string>;
  rules: PromiseOrValue<BigNumberish>[];
  flag: PromiseOrValue<boolean>;
  approversGiven: PromiseOrValue<BigNumberish>[];
  logicsList: PromiseOrValue<string>[];
  constantsList: PromiseOrValue<BytesLike>;
  structure1: AStructStruct;
  structure2: BStructStruct;
  structure3: TypeTwoStruct;
  nonce: PromiseOrValue<BytesLike>;
};

export type TypeOneStructOutput = [
  BigNumber,
  string,
  BigNumber[],
  boolean,
  number[],
  string[],
  string,
  AStructStructOutput,
  BStructStructOutput,
  TypeTwoStructOutput,
  string
] & {
  operation: BigNumber;
  contractAddress: string;
  rules: BigNumber[];
  flag: boolean;
  approversGiven: number[];
  logicsList: string[];
  constantsList: string;
  structure1: AStructStructOutput;
  structure2: BStructStructOutput;
  structure3: TypeTwoStructOutput;
  nonce: string;
};

export interface SignatureVerification_TypeOne_TypeTwoInterface
  extends utils.Interface {
  functions: {
    "buildDomainSeparator(string,string,address)": FunctionFragment;
    "recoverTypeOne((uint256,address,uint256[],bool,uint8[],address[],bytes,(bool),(string),(string,uint8),bytes32),bytes,string,bytes32)": FunctionFragment;
    "recoverTypeTwo((string,uint8),bytes,(string,uint8),bytes32)": FunctionFragment;
    "verifyTypeOne((uint256,address,uint256[],bool,uint8[],address[],bytes,(bool),(string),(string,uint8),bytes32),bytes,string,bytes32,address,string)": FunctionFragment;
    "verifyTypeTwo((string,uint8),bytes,(string,uint8),bytes32,address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buildDomainSeparator"
      | "recoverTypeOne"
      | "recoverTypeTwo"
      | "verifyTypeOne"
      | "verifyTypeTwo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildDomainSeparator",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTypeOne",
    values: [
      TypeOneStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverTypeTwo",
    values: [
      TypeTwoStruct,
      PromiseOrValue<BytesLike>,
      TypeTwoStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTypeOne",
    values: [
      TypeOneStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTypeTwo",
    values: [
      TypeTwoStruct,
      PromiseOrValue<BytesLike>,
      TypeTwoStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTypeOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverTypeTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTypeOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTypeTwo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SignatureVerification_TypeOne_TypeTwo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SignatureVerification_TypeOne_TypeTwoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buildDomainSeparator(
      domainName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recoverTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recoverTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    verifyTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    verifyTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  buildDomainSeparator(
    domainName: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    verifyingContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverTypeOne(
    message: TypeOneStruct,
    signature: PromiseOrValue<BytesLike>,
    operationId: PromiseOrValue<string>,
    domainSeparator: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  recoverTypeTwo(
    message: TypeTwoStruct,
    signature: PromiseOrValue<BytesLike>,
    structure3: TypeTwoStruct,
    domainSeparator: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  verifyTypeOne(
    message: TypeOneStruct,
    signature: PromiseOrValue<BytesLike>,
    operationId: PromiseOrValue<string>,
    domainSeparator: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    errMessage: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  verifyTypeTwo(
    message: TypeTwoStruct,
    signature: PromiseOrValue<BytesLike>,
    structure3: TypeTwoStruct,
    domainSeparator: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    errMessage: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    buildDomainSeparator(
      domainName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    recoverTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    verifyTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    buildDomainSeparator(
      domainName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buildDomainSeparator(
      domainName: PromiseOrValue<string>,
      version: PromiseOrValue<string>,
      verifyingContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoverTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTypeOne(
      message: TypeOneStruct,
      signature: PromiseOrValue<BytesLike>,
      operationId: PromiseOrValue<string>,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyTypeTwo(
      message: TypeTwoStruct,
      signature: PromiseOrValue<BytesLike>,
      structure3: TypeTwoStruct,
      domainSeparator: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      errMessage: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
