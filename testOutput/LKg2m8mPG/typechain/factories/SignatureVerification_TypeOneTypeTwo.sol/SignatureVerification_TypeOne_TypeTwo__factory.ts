/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  SignatureVerification_TypeOne_TypeTwo,
  SignatureVerification_TypeOne_TypeTwoInterface,
} from "../../SignatureVerification_TypeOneTypeTwo.sol/SignatureVerification_TypeOne_TypeTwo";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
      {
        internalType: "address",
        name: "verifyingContract",
        type: "address",
      },
    ],
    name: "buildDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "operation",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "rules",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "flag",
            type: "bool",
          },
          {
            internalType: "uint8[]",
            name: "approversGiven",
            type: "uint8[]",
          },
          {
            internalType: "address[]",
            name: "logicsList",
            type: "address[]",
          },
          {
            internalType: "bytes",
            name: "constantsList",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "exists",
                type: "bool",
              },
            ],
            internalType: "struct AStruct",
            name: "structure1",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "custom",
                type: "string",
              },
            ],
            internalType: "struct BStruct",
            name: "structure2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "tests",
                type: "string",
              },
              {
                internalType: "enum Operations",
                name: "testEnum",
                type: "uint8",
              },
            ],
            internalType: "struct TypeTwo",
            name: "structure3",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "nonce",
            type: "bytes32",
          },
        ],
        internalType: "struct TypeOne",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "operationId",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
    ],
    name: "recoverTypeOne",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "tests",
            type: "string",
          },
          {
            internalType: "enum Operations",
            name: "testEnum",
            type: "uint8",
          },
        ],
        internalType: "struct TypeTwo",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "string",
            name: "tests",
            type: "string",
          },
          {
            internalType: "enum Operations",
            name: "testEnum",
            type: "uint8",
          },
        ],
        internalType: "struct TypeTwo",
        name: "structure3",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
    ],
    name: "recoverTypeTwo",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "operation",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "rules",
            type: "uint256[]",
          },
          {
            internalType: "bool",
            name: "flag",
            type: "bool",
          },
          {
            internalType: "uint8[]",
            name: "approversGiven",
            type: "uint8[]",
          },
          {
            internalType: "address[]",
            name: "logicsList",
            type: "address[]",
          },
          {
            internalType: "bytes",
            name: "constantsList",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "bool",
                name: "exists",
                type: "bool",
              },
            ],
            internalType: "struct AStruct",
            name: "structure1",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "custom",
                type: "string",
              },
            ],
            internalType: "struct BStruct",
            name: "structure2",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "string",
                name: "tests",
                type: "string",
              },
              {
                internalType: "enum Operations",
                name: "testEnum",
                type: "uint8",
              },
            ],
            internalType: "struct TypeTwo",
            name: "structure3",
            type: "tuple",
          },
          {
            internalType: "bytes32",
            name: "nonce",
            type: "bytes32",
          },
        ],
        internalType: "struct TypeOne",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "operationId",
        type: "string",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "string",
        name: "errMessage",
        type: "string",
      },
    ],
    name: "verifyTypeOne",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "tests",
            type: "string",
          },
          {
            internalType: "enum Operations",
            name: "testEnum",
            type: "uint8",
          },
        ],
        internalType: "struct TypeTwo",
        name: "message",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
      {
        components: [
          {
            internalType: "string",
            name: "tests",
            type: "string",
          },
          {
            internalType: "enum Operations",
            name: "testEnum",
            type: "uint8",
          },
        ],
        internalType: "struct TypeTwo",
        name: "structure3",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "domainSeparator",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "string",
        name: "errMessage",
        type: "string",
      },
    ],
    name: "verifyTypeTwo",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type SignatureVerification_TypeOne_TypeTwoConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureVerification_TypeOne_TypeTwoConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureVerification_TypeOne_TypeTwo__factory extends ContractFactory {
  constructor(...args: SignatureVerification_TypeOne_TypeTwoConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SignatureVerification_TypeOne_TypeTwo> {
    return super.deploy(
      overrides || {}
    ) as Promise<SignatureVerification_TypeOne_TypeTwo>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SignatureVerification_TypeOne_TypeTwo {
    return super.attach(address) as SignatureVerification_TypeOne_TypeTwo;
  }
  override connect(
    signer: Signer
  ): SignatureVerification_TypeOne_TypeTwo__factory {
    return super.connect(
      signer
    ) as SignatureVerification_TypeOne_TypeTwo__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureVerification_TypeOne_TypeTwoInterface {
    return new utils.Interface(
      _abi
    ) as SignatureVerification_TypeOne_TypeTwoInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureVerification_TypeOne_TypeTwo {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignatureVerification_TypeOne_TypeTwo;
  }
}
